#Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)

drake-base.class.initialized                                     = Class initialized [class.name={0}, class.fullname={1}]
drake-base.class.initializing                                    = Class initializing [class.name={0}, class.fullname={1}]
drake-base.class.initializingError                               = Class initialization failed [class.name={0}, class.fullname={1}, reason={2}]
drake-base.command                                               = Textual command representation cannot be null
drake-base.command.aliasAlreadyRegistered                        = Command alias is already registered [command.alias={0}, command.name={1}]
drake-base.command.alreadyRegistered                             = Command is already registered [command.name={0}]
drake-base.command.annotationRequired                            = A command must be annotated with the @Command annotation
drake-base.command.categoryCannotBeNull                          = Command category cannot be null
drake-base.command.classNotFoundForTextual                       = Cannot find a command class corresponding to [command={0}]
drake-base.command.converterRegistered                           = Command converter registered [converter.name={0}, converter.fullname={1}]
drake-base.command.doesNotMatchRegularExpression                 = Command [command.class={0}, command.value={1}, command.regex={2}, command.usage={3}] does not match its regular expression
drake-base.command.excludedFromRegistration                      = Command [command.category={0}, command.type={1}] is excluded from registration
drake-base.command.handlerCannotBeNull                           = Command handler cannot be null
drake-base.command.inputConverterCannotBeNull                    = Input command converter cannot be null
drake-base.command.keyCannotBeNull                               = Command key cannot be null
drake-base.command.methodCannotBeNull                            = Command method cannot be null
drake-base.command.registered                                    = Command registered [name={0}, class.simple={1}, class.full={2}]
drake-base.command.textualCannotBeNull                           = Textual command representation cannot be null
drake-base.command.typeCannotBeNull                              = Command type cannot be null
drake-base.command.typeNotRegistered                             = Command [command.type={0}, command.protocol.class={1}] is not part of the registered command protocol
drake-base.encoding.algorithmIsNull                              = Data encoding/decoding algorithm cannot be null
drake-base.encoding.bufferIsNull                                 = Buffer of bytes cannot be null
drake-base.encoding.classAlreadyRegistered                       = Class already registered [full.classname={0}]
drake-base.encoding.classCatalogIsNull                           = Class catalog cannot be null
drake-base.encoding.classCatalogNotFound                         = No class catalog has been defined or not found. Ensure you have provided a IClassCatalog to the data encoder/decoder
drake-base.encoding.classNotFound                                = Class not found in class catalog [class={0}]
drake-base.encoding.classNotFoundId                              = Class not found in class catalog [hash={0}]
drake-base.encoding.classRegistered                              = Class registered in class catalog [class={0}, hash={1}]
drake-base.encoding.classToRegisterIsNull                        = Class to register in class catalog cannot be null
drake-base.encoding.classUnregistered                            = Class unregistered [from=ClassCatalog, class={0}]
drake-base.encoding.codecCollectionIsNull                        = Collection codec cannot be null
drake-base.encoding.codecObjectIsNull                            = Object codec cannot be null
drake-base.encoding.codecPrimitiveIsNull                         = Primitive codec cannot be null
drake-base.encoding.collision                                    = Collision in [entity=ClassCatalog, class={0}, registered={1}, hash={2}]
drake-base.encoding.error                                        = Error for element: '{0}'. Caused by: 
drake-base.encoding.notImplementingSerializable                  = Class '{0}' must implement the Serializable interface
drake-base.encoding.objectIsNull                                 = Object cannot be null
drake-base.encoding.serialVersionUidMismatch                     = Serial version UID mismatch for [parent.class={2}, type=field, name={0}, class={1}, uid={3}, expected.uid={4}]
drake-base.encoding.transientAttribute                           = Transient element excluded from the encoding/decoding process for [type=field, name={0}]
drake-base.encoding.unsupportedClassType                         = Element [name={0}, class={1}] has an invalid (not supported) class. To be encodable and/or decodable, the class must implement the Encodable interface
drake-base.encoding.unsupportedPrimitiveType                     = Element [name={0}, class={1}] has an invalid (not supported) primitive data type
drake-base.enumeration.cannotCreateEnumerated                    = Cannot create enumerated value [enumeration={0}, value={1}]
drake-base.properties.cannotBeNull                               = Properties cannot be null!
drake-base.properties.initialization                             = Properties initializing [file={0}]
drake-base.properties.initializationFailed                       = Properties initialized failed [file={0}, reason={1}]
drake-base.properties.initialized                                = Properties initialized [file={0}, entries={1}]
drake-base.properties.propertyLoaded                             = Property loaded [key={0}, value={1}]
drake-base.properties.propertyNotFound                           = Property error [key={0}, reason=Cannot load property, cause={1}]
drake-base.property.application.data.encoder.algorithm.classname = org.heliosphere.drake.application.data.encoder.algorithm.classname
drake-base.property.application.data.encoder.algorithm.type      = org.heliosphere.drake.application.data.encoder.algorithm.type
drake-base.property.application.message.encoder.type             = org.heliosphere.drake.application.message.encoder.type
drake-base.property.application.message.protocol.classname       = org.heliosphere.drake.application.message.protocol.classname
drake-base.resource.bundle                                       = Resource bundle [name={0}, locale={1}] is already registered
drake-base.resource.bundle.alreadyRegistered                     = Already registered [scope=ResourceBundle, class={0}, locale={1}]
drake-base.resource.bundle.error                                 = Resource bundle [file={0}, locale={1}] cannot be found
drake-base.resource.bundle.invalidConfiguration                  = Resource bundle configuration file cannot be null or empty
drake-base.resource.bundle.invalidKey                            = Resource bundle key to retrieve cannot be null or empty
drake-base.resource.bundle.invalidLocale                         = Resource bundle locale cannot be null or empty
drake-base.resource.bundle.invalidName                           = Resource bundle file name cannot be null or empty
drake-base.resource.bundle.notFound                              = Resource bundle [name={0}, locale={1}, fullname={0}_{1}.properties] cannot be found
drake-base.resource.bundle.registered                            = Resource bundle registered [name={0}, locale={1}, entries={2}]
drake-base.resource.bundle.replaced                              = Resource bundle [name={0}, locale={2}, entries={3}] has replaced bundle [name={0}, locale={1}]
drake-base.resource.notFound                                     = Resource [name={0}] cannot be found
drake-base.terminal.created                                      = Terminal created [thread.name={0}, thread.priority={1}, thread.pid={2}, thread.state={3}]
drake-base.terminal.listenerNotification                         = Terminal command notification [command.name={0}, listener.class={1}]
drake-base.terminal.listenerRegistered                           = Terminal listener registered [listener.name={0}, listener.fullname={1}]
drake-base.terminal.listenerUnregistered                         = Terminal listener unregistered [listener.name={0}, listener.fullname={1}]
drake-base.terminal.resumed                                      = Terminal resumed [thread.name={0}, thread.priority={1}, thread.pid={2}, thread.state={3}]
drake-base.terminal.started                                      = Terminal started [thread.name={0}, thread.priority={1}, thread.pid={2}, thread.state={3}]
drake-base.terminal.stopped                                      = Terminal stopped [thread.name={0}, thread.priority={1}, thread.pid={2}, thread.state={3}]
drake-base.terminal.suspended                                    = Terminal suspended [thread.name={0}, thread.priority={1}, thread.pid={2}, thread.state={3}]
drake-base.test.dummy                                            = A test message from component: drake-base
